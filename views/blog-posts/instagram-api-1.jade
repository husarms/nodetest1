extends ../layout

block content
    style(text='text/css').
        pre.prettyprint {
            border: 1px solid #ccc;
            margin-bottom: 0;
            padding: 9.5px;
            white-space: pre-wrap;
        }
    div.breadcrumbs
        div.container
            a(href='/blog')
                h1.pull-left Blog
            ul.pull-right.breadcrumb
                li
                    a(href='/') Home
                li
                    a(href='/blog') Blog
                li.active
                    a(href='')=title
    //-End Breadcrumbs
    div.container.content-sm
        div.news-v3.margin-bottom-60
            div.news-v3-in.bg-color-darker.col-md-10.col-md-offset-1
                div.row
                    div.col-md-10.col-md-offset-1
                        div(ng-app="myApp" ng-controller="myCtrl")
                            //-img.img-responsive.margin-bottom-20(src='/images/blog/instagram-api/instagram-title.png',alt='')
                            h2.Title=title
                                small &nbsp;
                            ul.list-inline.posted-info
                                li Matt Husar
                                li April 29, 2016
                            hr
                            p.
                                For this post I wanted to work through a basic example of requesting data from an external API and displaying it on a page. We will be using the Instagram API as our data source, making requests via http, getting JSON data back and using a bit of Angular to display it.
                            p.
                                The end result allows the user to search for tags, then get a listing of matching tags along with their media count -
                            div.one-page-inner.bg-light
                                h3 <i class="fa fa-instagram"></i> Instagram API Demo - Search tags
                                hr
                                //-Step 1 - Direct your user to our authorization URL
                                div(ng-show="accessToken == null")
                                    p
                                        a.btn-u.btn-brd-hover(type="button" href='https://api.instagram.com/oauth/authorize/?client_id=2aaa8ce013bc4a1291054e1ff79481f4&redirect_uri={{baseUrl}}&response_type=token') Click Here for Access Token
                                //-Step 2 - Request Data
                                div(ng-show="accessToken != null")
                                    p.
                                        <i class="fa fa-check-square-o"></i> Access token obtained
                                    p
                                        div.input-group
                                            span.input-group-btn
                                                button.btn-u.btn-brd-hover(type="button",ng-click='getTagData()') <i class="fa fa-search"></i> Search Tags
                                            input.form-control(type="text", placeholder="Enter a tag name", ng-model="searchQuery", maxlength="30")
                                    div.alert.alert-warning(ng-hide="message == null")
                                        a.close(ng-click="message = null", aria-label="close") &times;
                                        p {{message}}
                                    table.table.table-condensed.table-hover(ng-show="tags")
                                        thead
                                            td Tag Name
                                            td Media Count
                                        tr(ng-repeat="tag in tags")
                                            td {{tag.name}}
                                            td {{tag.media_count}}
                            br
                            h3 Registering your application
                            p.
                                Way back when, certain parts of the Instagram API were accessible without authentication. This made it popular with developers who wanted an easy way to play around with a REST API. Nowadays it is more locked down and requires a bit of setup work before we can start making requests.
                            p.
                                First you will need to 'register' your application with Instagram. Once it has been 'approved' it will be assigned a client id. This client id will then be included in each request you make to the API. Check out the <a href="https://www.instagram.com/developer/">Instagram developer page</a> for more information.
                            br
                            h3 Obtaining an access token
                            p.
                                Once we have our client ID, the next item we need is an access token. This will be issued to each user by prompting them to login to their Instagram account. We do this through a link to Instagram which will redirect back to our page with a token after the user logs in -
                            p
                                pre.prettyprint.
                                    &lt;a type="button" href="https://api.instagram.com/oauth/authorize/?client_id=2aaa8ce013bc4a1291054e1ff79481f4&amp;redirect_uri=http://www.matthusar.com/blog/posts/instagram-api&amp;response_type=token" class="btn-u btn-brd-hover">
                                        Click Here for Access Token
                                    &lt;/a&gt;
                            p.
                                Clicking this link will bring the user to an Instagram login screen -
                            img.img-responsive.margin-bottom-20(src='/images/blog/instagram-api/instagram-login.png',alt='')
                            p.
                                Once the user has successfully logged in, they will be redirected back to our page with a token. Our URL will change from this -
                            p
                                pre.prettyprint.
                                    matthusar.com/blog/posts/instagram-api
                            p.
                                To this -
                            p
                                pre.prettyprint.
                                    matthusar.com/blog/posts/instagram-api#access_token=375282163.2aaa8ce.089966e9775148d8b2652d214106e2a4
                            p.
                                We will want to take the value of this token and assign it to a variable so we can use it elsewhere. Since we are using Angular we can check the URL for an access token in the app controller, then assign it to a scope variable. This will check for a token every time the page loads -
                            p
                                pre.prettyprint.
                                    app.controller('myCtrl', function($scope, $http) {
                                        //Get token from URL
                                        var urlToken = location.hash.split("access_token=")[1];
                                        if(urlToken !== null){
                                            $scope.accessToken = urlToken;
                                        }
                                    ...
                            p.
                                Now that we have the token value assigned to a scope variable, we can enhance things a bit by only showing the access token link when we actually NEED a token -
                            p
                                pre.prettyprint.
                                    &lt;div ng-show="accessToken == null"&gt;
                                        &lt;p&gt;
                                            &lt;a type="button" href="https://api.instagram.com/oauth/authorize/?client_id=2aaa8ce013bc4a1291054e1ff79481f4&amp;redirect_uri=http://www.matthusar.com/blog/posts/instagram-api&amp;response_type=token" class="btn-u btn-brd-hover"&gt;
                                                Get Access Token
                                            &lt;/a&gt;
                                        &lt;/p&gt;
                                    &lt;/div&gt;
                            br
                            h3 Issuing a request
                            p.
                                Now that we have a client ID and an access token we are ready to start using the API. The final parameter we will pass to the API is a search query. We will use a text box tied to a scope variable, along with a button that fires off a Javascript function -
                            p
                                pre.prettyprint.
                                    &lt;div class="input-group"&gt;
                                        &lt;span class="input-group-btn"&gt;
                                            &lt;button type="button" ng-click="getTagData()" class="btn-u btn-brd-hover"&gt;
                                                &lt;i class="fa fa-search"&gt;&lt;/i&gt; Search Tags
                                            &lt;/button&gt;
                                        &lt;/span&gt;
                                        &lt;input type="text" placeholder="Enter a tag name" ng-model="searchQuery" class="form-control"&gt;
                                    &lt;/div&gt;
                            p.
                                The Javascript function will verify the user has entered a search query, then make an HTTP request to the Instagram API. We will pass our client ID, access token and query as parameters -
                            p
                                pre.prettyprint.
                                    //Search for tag data
                                    $scope.getTagData = function(){
                                        $scope.message = null;
                                        //Validate input
                                        if($scope.searchQuery === undefined){
                                            $scope.message = "Please enter search criteria";
                                        }
                                        //Send http request to API
                                        else{
                                            $http.jsonp('https://api.instagram.com/v1/tags/search?' +
                                                    'q=' + $scope.searchQuery +
                                                    '&access_token=' + $scope.accessToken +
                                                    '&callback=JSON_CALLBACK')
                                                    .then(function(json){
                                                        //Get first 5 response results
                                                        $scope.tags = json.data.data.slice(0,5);
                                                    });
                                        }
                            br
                            h3 Displaying the response
                            p.
                                If our request is successful, we should get a JSON response back from Instagram with an array of objects that match our search query -
                            p
                                pre.prettyprint.
                                    {
                                       "meta":{
                                          "code":200
                                       },
                                       "data":[
                                          {
                                             "media_count":255815543,
                                             "name":"tagsforlikes"
                                          },
                                          {
                                             "media_count":8235370,
                                             "name":"tag"
                                          },
                                          {
                                             "media_count":4655343,
                                             "name":"tagstagramers"
                                          },
                                          {
                                             "media_count":2475242,
                                             "name":"tagsforfollow"
                                          },...
                            p.
                                To display the data, we will assign the object array to another scope variable called "tags". We can do this by chaining another function after the request using Angular's .then() function. For the sake of simplicity we are slicing down the array to just the first 5 objects -
                            p
                                pre.prettyprint.
                                    .then(function(json){
                                        //Get first 5 response results
                                        $scope.tags = json.data.data.slice(0,5);
                                    });
                            p.
                                We can then reference the "tags" variable in our HTML - here we are creating a table, looping through each object in the tags array and creating a row that displays the tag name and media count. Again we can use a bit of Angular to hide this table until we have tag data to display -
                            p
                                pre.prettyprint(ng-non-bindable).
                                    &lt;table ng-show="tags" class="table table-condensed table-hover"&gt;
                                        &lt;thead&gt;
                                            &lt;td&gt;Tag Name&lt;/td&gt;
                                            &lt;td&gt;Media Count&lt;/td&gt;
                                        &lt;/thead&gt;
                                        &lt;tr ng-repeat="tag in tags"&gt;
                                            &lt;td&gt;{{tag.name}}&lt;/td&gt;
                                            &lt;td&gt;{{tag.media_count}}&lt;/td&gt;
                                        &lt;/tr&gt;
                                    &lt;/table&gt;
                            p.
                                That's it. Admittedly this was a super basic example, but now we have the flow down for authenticating, requesting data and displaying the response from Instagram's API. Check out their <a href="https://www.instagram.com/developer/">documentation</a> to get some ideas of what else you could implement.
                            p.
                                Obviously Instagram is all about pictures and videos - so look out for a future post on retrieving media content.

    //-JS Implementing Plugins
    script(type='text/javascript',src='/plugins/prettify.js')
    //-JS Page Level
    script(type='text/javascript').
        var app = angular.module('myApp', []);
        app.controller('myCtrl', function($scope, $http) {
            $scope.baseUrl = location.origin + location.pathname;
            //Get token from URL
            var urlToken = location.hash.split("access_token=")[1];
            if(urlToken !== null){
                $scope.accessToken = urlToken;
            }
            //Search for tag data
            $scope.getTagData = function(){
                $scope.message = null;
                //Validate input
                if($scope.searchQuery === undefined){
                    $scope.message = "Please enter search criteria";
                }
                //Send http request to API
                else{
                    $http.jsonp('https://api.instagram.com/v1/tags/search?' +
                            'q=' + $scope.searchQuery +
                            '&access_token=' + $scope.accessToken +
                            '&callback=JSON_CALLBACK')
                            .then(function(json){
                                //Get first 5 response results
                                $scope.tags = json.data.data.slice(0,5);
                            });
                }
            }
        });
